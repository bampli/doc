<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ampli Business on bAmpli v0.05-02x</title><link>https://bampli.github.io/</link><description>Recent content in Ampli Business on bAmpli v0.05-02x</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 17 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://bampli.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Without ToC</title><link>https://bampli.github.io/docs/bampli/cyclo/without-toc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/bampli/cyclo/without-toc/</guid><description>At me ipso nepotibus nunc celebratior genus Tanto oblite Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.
Quam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque.</description></item><item><title>The Process</title><link>https://bampli.github.io/docs/bampli/cyclo/process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/bampli/cyclo/process/</guid><description>The Process Inspired on William Deming&amp;rsquo;s process specification from the &amp;rsquo;50s that states:
The Process would be divided into stages; the work would enter a certain stage, change state and continue, having as client the next stage. The final step would be for the user, buyer of the product or service, the main link of the production line. At each stage there would be production, that is, something would happen in the assets that enter the stage, causing its exit in a different state.</description></item><item><title>Times of Gain</title><link>https://bampli.github.io/docs/bampli/cyclo/cyclo-time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/bampli/cyclo/cyclo-time/</guid><description>Times of Gain The following rules add more details to the Process specification:
Connected as a Cyclo, the Process is specified by the timing of its Stages. Stages consumes Resources, both from Facility and from Cyclo. The Stage allocates Resources from the Facility to accomplish its task. Every Stage requires Skills to accomplish its task. The Skill is provided by a combination of Workers and/or Tools. The Stage also allocates Resources from the Cyclo to accomplish its task.</description></item><item><title>The Conflict in the Pyramid</title><link>https://bampli.github.io/posts/conflict-in-the-pyramid/</link><pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate><guid>https://bampli.github.io/posts/conflict-in-the-pyramid/</guid><description>An individual with certain skills and resources creates a small business. Applying his knowledge, he elaborates a process that transforms market-acquired raw materials into products he intends to sell. In the beginning, he is the do-everything. Buy, produce, sell, invoice, pay and receive. Market acceptance is good and sales grow rapidly, driven by word of mouth from satisfied customers.
The diagram below represents this stage of business, where the investor is very close to everything and everyone.</description></item><item><title>Cyclo Graph</title><link>https://bampli.github.io/docs/bampli/cyclo/cyclo-graph/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/bampli/cyclo/cyclo-graph/</guid><description>Cyclo Graph The Cyclo graph has Product and Stage vertices and a bidirecional sendW edge.
The raw material is a product that enters the process through a stage. Then, it becomes a work-in-process (wip) asset that is sent from one stage to another, until the final product is obtained. The sendW edge expects to carry wips along the production flow, clustered by timestep.
// cyclo-v1-schema schema.vertexLabel(&amp;#39;Stage&amp;#39;). ifNotExists(). partitionBy(&amp;#39;stage_name&amp;#39;, Text). create(); schema.</description></item><item><title>The Process</title><link>https://bampli.github.io/posts/process/</link><pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate><guid>https://bampli.github.io/posts/process/</guid><description>According to Deming&amp;rsquo;s process definition created in the &amp;rsquo;50s:
The Process would be divided into stages; the work would enter a certain stage, change state and continue, having as client the next stage. The final step would be for the user, buyer of the product or service, the main link of the production line. At each stage there would be production, that is, something would happen in the assets that enter the stage, causing its exit in a different state.</description></item><item><title>Cyclo Model</title><link>https://bampli.github.io/docs/bampli/cyclo/cyclo-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/bampli/cyclo/cyclo-model/</guid><description>Cyclo Model CycloJourneyCatalog class CycloJourneyCatalog(object): def __init__(self, cyclo_name, journey_id, start, end, active, summary): self.cyclo_name = cyclo_name self.journey_id = uuid_from_string(journey_id) self.start = format_timestamp(start) self.end = format_timestamp(end) self.active = active self.summary = summary CycloSpin class CycloSpin(object): def __init__(self, cyclo_name, journey_id, data): self.cyclo_name self.journey_id = uuid_from_string(journey_id) self.spin = float(data.get(&amp;#39;spin&amp;#39;)) self.spin_unit = data.get(&amp;#39;spin_unit&amp;#39;, &amp;#39;#/t&amp;#39;) self.reading_time = format_timestamp() Stage class Stage(object): def __init__(self, stage_name, cyclo_name, timestep): self.stage_name self.cyclo_name self.timestep self.spin = float(data.get(&amp;#39;spin&amp;#39;)) self.spin_unit = data.get(&amp;#39;spin_unit&amp;#39;, &amp;#39;#/t&amp;#39;) self.</description></item><item><title>The Financial Indicators</title><link>https://bampli.github.io/posts/indicators/</link><pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate><guid>https://bampli.github.io/posts/indicators/</guid><description>Inspired on Goldratt&amp;rsquo;s indicators for the Theory of Constraints, the Financial Indicators are listed below. The simplicity of the equations is vital to their general acceptance and understanding. This is the basic financial information that companies of any type and size should maintain.
Financial Indicators Initials Indicator Description RI Return on Investment Equals Net Profit divided by Investment. I Investment It is all the money the system invests by buying Inventory that the system intends to sell.</description></item><item><title>Cyclo Service</title><link>https://bampli.github.io/docs/bampli/cyclo/cyclo-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/bampli/cyclo/cyclo-service/</guid><description>Cyclo Service CycloService Properties - cyclo_journey_catalog_dao - cyclo_spin_dao - _session_manager = SessionManager() - _session Methods - get_session(self) - save_credentials(self, username, password, keyspace, scbpath) - test_credentials(self, username, password, keyspace, scbpath) - connect(self) - check_connection(self) - get_cyclo_journey_catalog_dao(self) - get_cyclo_spin_dao(self) - create_new_journey_for_cyclo( self, cyclo_name, journey_id, start, end, active, summary) - get_all_cyclo_journeys(self) - get_all_journeys_for_cyclo(self, cyclo_name) - get_single_journey_for_cyclo(self, cyclo_name, journey_id) - get_spin_readings_for_cyclo_journey( self, cyclo_name, journey_id, page_size, page_state) - save_spin_reading_for_cyclo_journey( self, cyclo_name, stage_name, journey_id, data)</description></item><item><title>TPM: Total Productive Maintenance</title><link>https://bampli.github.io/posts/tpm/</link><pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate><guid>https://bampli.github.io/posts/tpm/</guid><description>TPM consists of a systematic program for enterprise development that addresses maintenance by optimizing equipment effectiveness. TPM consolidates failures and waste into a creative approach, using time as a common link.
Thus, Working Time is defined as the total journey time that company works. From then on, we will be discounting the time spent on failures and waste, creating indexes that will selectively signal machine and equipment performance problems, operation failures and product defects.</description></item><item><title>Data Access</title><link>https://bampli.github.io/docs/bampli/cyclo/cyclo-dao/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/bampli/cyclo/cyclo-dao/</guid><description>Data Access SessionManager Methods - get_instance() - save_credentials(self, username, password, keyspace, scbpath) - test_credentials(self, username, password, keyspace, scbpath) - connect(self) - check_connection(self) - close(self) CycloJourneyCatalogDAO Methods - maybe_create_schema(self) - write_journey( self, cyclo_name, journey_id, start, end, active, summary) - get_all_journeys(self) - get_all_journeys_for_cyclo(self, cyclo_name) - get_single_journey_for_cyclo(self, cyclo_name, journey_id) CycloSpinDAO Methods - maybe_create_schema(self) - write_readings(self, cyclo_name, stage_name, journey_id, data) - get_spin_readings_for_cyclo_journey( self, cyclo_name, journey_id, page_size=25, page_state=None)</description></item><item><title>The Cyclo</title><link>https://bampli.github.io/posts/cyclo/</link><pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate><guid>https://bampli.github.io/posts/cyclo/</guid><description>Gain is the most important measure In order to discuss the Cyclo, it is necessary to assume that Gain is the most important measure when it comes to increase the Net Profit. Check the Net Profit and Gain formulas below:
\( \begin{aligned} NP&amp;=(PS-RM)-(WF+OH) \\ G&amp;=PS-RM \\ \end{aligned} \) NP: Net Profit; G: Gain; PS: Product Sales; RM: Raw Material; WF: Workforce; OH: Overhead
Definitely, it is possible to improve NP just by decreasing any of the expenses.</description></item><item><title>Company &amp; Planet</title><link>https://bampli.github.io/posts/company-planet/</link><pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate><guid>https://bampli.github.io/posts/company-planet/</guid><description>The Company and the Planet The following relationships rule the interaction between the Company and the Planet. COMPANY The Company has Investors that own Shares that decide how to manage a Facility that implements a bAmpli Circuit with at least one bAmpli that handles at least one Cyclo composed by one Stage or more. PLANET The Planet is a living System populated by cooperative Work made by a Process expressed by a bAmpli Circuit with at least one bAmpli that handles at least one Cyclo composed by one Stage or more.</description></item><item><title>P&amp;Q Factory</title><link>https://bampli.github.io/posts/pq-factory/</link><pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate><guid>https://bampli.github.io/posts/pq-factory/</guid><description>This is the Process used as a sample when a process is needed in this project.
The P&amp;amp;Q Factory gives no room for apology and demonstrates how the &amp;ldquo;Theory of Constraints&amp;rdquo; can help managers with their decision-making logic. The fictional factory portfolio has products P &amp;amp; Q.
P&amp;amp;Q Factory Using TPM to describe the P&amp;amp;Q Factory, there is little reason to blame poor corporate results:
ati = 1 Equipment runs nonstop for the working time, available time index is 1.</description></item><item><title>The Stage</title><link>https://bampli.github.io/posts/stage/</link><pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate><guid>https://bampli.github.io/posts/stage/</guid><description>In order to analyze thoroughly the Stage of the Process, we should consider the production flows that results in the final Product for the consumer.
The Production Flow Although the following example shows a manufacturing process, these flows can also be applied to generic environments where resources are used for tasks that require skills, to achieve a goal.
In order to extract a process sample, the P&amp;amp;Q Factory, shown below, will be used as an example.</description></item><item><title>Times of Gain</title><link>https://bampli.github.io/posts/times-of-gain/</link><pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate><guid>https://bampli.github.io/posts/times-of-gain/</guid><description>Stage Model The Stage revised model shows below the Facility resources divided into two categories:
FacilityInfra: includes infrastructure items, like Shop Floor Area, Energy, etc. FacilityOp: includes operational items with Skills, like Tools and Workers. mermaid.initialize({ flowchart: { useMaxWidth:true } }); classDiagram Planet -- "1..n" Product : populated_by Product -- "1..n" Process : made_by Process -- "1..n" Stage : composed_of Stage -- "1..n" Resource : uses Stage -- Stage : previous Stage -- Stage : next Worker -- "</description></item><item><title/><link>https://bampli.github.io/docs/shortcodes/buttons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/shortcodes/buttons/</guid><description>Buttons Buttons are styled links that can lead to local page or external link.
Example {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}} Get Home Contribute</description></item><item><title/><link>https://bampli.github.io/docs/shortcodes/columns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/shortcodes/columns/</guid><description>Columns Columns help organize shorter pieces of content horizontally for readability.
{{&amp;lt; columns &amp;gt;}} &amp;lt;!-- begin columns block --&amp;gt; # Left Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic sparator, between columns --&amp;gt; # Mid Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic sparator, between columns --&amp;gt; # Right Content Lorem markdownum insigne... {{&amp;lt; /columns &amp;gt;}} Example Left Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!</description></item><item><title/><link>https://bampli.github.io/docs/shortcodes/expand/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/shortcodes/expand/</guid><description>Expand Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.
Example Default {{&amp;lt; expand &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}} Expand ↕ Markdown content Lorem markdownum insigne&amp;hellip; With Custom Label {{&amp;lt; expand &amp;#34;Custom Label&amp;#34; &amp;#34;...&amp;#34; &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}} Custom Label ... Markdown content Lorem markdownum insigne.</description></item><item><title/><link>https://bampli.github.io/docs/shortcodes/hints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/shortcodes/hints/</guid><description>Hints Hint shortcode can be used as hint/alerts/notification block.
There are 3 colors to choose: info, warning and danger.
{{&amp;lt; hint [info|warning|danger] &amp;gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{&amp;lt; /hint &amp;gt;}} Example Markdown content
Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content</description></item><item><title/><link>https://bampli.github.io/docs/shortcodes/katex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/shortcodes/katex/</guid><description>KaTeX KaTeX shortcode let you render math typesetting in markdown document. See KaTeX
Example {{&amp;lt; katex [display] [class=&amp;#34;text-center&amp;#34;] &amp;gt;}} x = \begin{cases} a &amp;amp;\text{if } b \\ c &amp;amp;\text{if } d \end{cases} {{&amp;lt; /katex &amp;gt;}} Display Mode Example Here is some inline example: \(\pi(x)\) , rendered in the same line. And below is display example, having display: block \[ x = \begin{cases} a &amp;\text{if } b \\ c &amp;\text{if } d \end{cases} \] Text continues here.</description></item><item><title/><link>https://bampli.github.io/docs/shortcodes/mermaid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/shortcodes/mermaid/</guid><description>Mermaid Chart Mermaid is library for generating svg charts and diagrams from text.
Example {{&amp;lt; mermaid [class=&amp;#34;text-center&amp;#34;]&amp;gt;}} sequenceDiagram Alice-&amp;gt;&amp;gt;Bob: Hello Bob, how are you? alt is sick Bob-&amp;gt;&amp;gt;Alice: Not so good :( else is well Bob-&amp;gt;&amp;gt;Alice: Feeling fresh like a daisy end opt Extra response Bob-&amp;gt;&amp;gt;Alice: Thanks for asking end {{&amp;lt; /mermaid &amp;gt;}}</description></item><item><title/><link>https://bampli.github.io/docs/shortcodes/tabs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/shortcodes/tabs/</guid><description>Tabs Tabs let you organize content by context, for example installation instructions for each supported platform.
{{&amp;lt; tabs &amp;#34;uniqueid&amp;#34; &amp;gt;}} {{&amp;lt; tab &amp;#34;MacOS&amp;#34; &amp;gt;}} # MacOS Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Linux&amp;#34; &amp;gt;}} # Linux Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Windows&amp;#34; &amp;gt;}} # Windows Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; /tabs &amp;gt;}} Example MacOS MacOS This is tab MacOS content.
Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!</description></item></channel></rss>