<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>bAmpli v0.05-02x</title><link>https://bampli.github.io/docs/bampli/cyclo/</link><description>Recent content on bAmpli v0.05-02x</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://bampli.github.io/docs/bampli/cyclo/index.xml" rel="self" type="application/rss+xml"/><item><title>Without ToC</title><link>https://bampli.github.io/docs/bampli/cyclo/without-toc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/bampli/cyclo/without-toc/</guid><description>At me ipso nepotibus nunc celebratior genus Tanto oblite Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.
Quam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque.</description></item><item><title>The Process</title><link>https://bampli.github.io/docs/bampli/cyclo/process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/bampli/cyclo/process/</guid><description>The Process Inspired on William Deming&amp;rsquo;s process specification from the &amp;rsquo;50s that states:
The Process would be divided into stages; the work would enter a certain stage, change state and continue, having as client the next stage. The final step would be for the user, buyer of the product or service, the main link of the production line. At each stage there would be production, that is, something would happen in the assets that enter the stage, causing its exit in a different state.</description></item><item><title>Times of Gain</title><link>https://bampli.github.io/docs/bampli/cyclo/cyclo-time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/bampli/cyclo/cyclo-time/</guid><description>Times of Gain The following rules add more details to the Process specification:
Connected as a Cyclo, the Process is specified by the timing of its Stages. Stages consumes Resources, both from Facility and from Cyclo. The Stage allocates Resources from the Facility to accomplish its task. Every Stage requires Skills to accomplish its task. The Skill is provided by a combination of Workers and/or Tools. The Stage also allocates Resources from the Cyclo to accomplish its task.</description></item><item><title>Cyclo Graph</title><link>https://bampli.github.io/docs/bampli/cyclo/cyclo-graph/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/bampli/cyclo/cyclo-graph/</guid><description>Cyclo Graph The Cyclo graph has Product and Stage vertices and a bidirecional sendW edge.
The raw material is a product that enters the process through a stage. Then, it becomes a work-in-process (wip) asset that is sent from one stage to another, until the final product is obtained. The sendW edge expects to carry wips along the production flow, clustered by timestep.
// cyclo-v1-schema schema.vertexLabel(&amp;#39;Stage&amp;#39;). ifNotExists(). partitionBy(&amp;#39;stage_name&amp;#39;, Text). create(); schema.</description></item><item><title>Cyclo Model</title><link>https://bampli.github.io/docs/bampli/cyclo/cyclo-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/bampli/cyclo/cyclo-model/</guid><description>Cyclo Model CycloJourneyCatalog class CycloJourneyCatalog(object): def __init__(self, cyclo_name, journey_id, start, end, active, summary): self.cyclo_name = cyclo_name self.journey_id = uuid_from_string(journey_id) self.start = format_timestamp(start) self.end = format_timestamp(end) self.active = active self.summary = summary CycloSpin class CycloSpin(object): def __init__(self, cyclo_name, journey_id, data): self.cyclo_name self.journey_id = uuid_from_string(journey_id) self.spin = float(data.get(&amp;#39;spin&amp;#39;)) self.spin_unit = data.get(&amp;#39;spin_unit&amp;#39;, &amp;#39;#/t&amp;#39;) self.reading_time = format_timestamp() Stage class Stage(object): def __init__(self, stage_name, cyclo_name, timestep): self.stage_name self.cyclo_name self.timestep self.spin = float(data.get(&amp;#39;spin&amp;#39;)) self.spin_unit = data.get(&amp;#39;spin_unit&amp;#39;, &amp;#39;#/t&amp;#39;) self.</description></item><item><title>Cyclo Service</title><link>https://bampli.github.io/docs/bampli/cyclo/cyclo-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/bampli/cyclo/cyclo-service/</guid><description>Cyclo Service CycloService Properties - cyclo_journey_catalog_dao - cyclo_spin_dao - _session_manager = SessionManager() - _session Methods - get_session(self) - save_credentials(self, username, password, keyspace, scbpath) - test_credentials(self, username, password, keyspace, scbpath) - connect(self) - check_connection(self) - get_cyclo_journey_catalog_dao(self) - get_cyclo_spin_dao(self) - create_new_journey_for_cyclo( self, cyclo_name, journey_id, start, end, active, summary) - get_all_cyclo_journeys(self) - get_all_journeys_for_cyclo(self, cyclo_name) - get_single_journey_for_cyclo(self, cyclo_name, journey_id) - get_spin_readings_for_cyclo_journey( self, cyclo_name, journey_id, page_size, page_state) - save_spin_reading_for_cyclo_journey( self, cyclo_name, stage_name, journey_id, data)</description></item><item><title>Data Access</title><link>https://bampli.github.io/docs/bampli/cyclo/cyclo-dao/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bampli.github.io/docs/bampli/cyclo/cyclo-dao/</guid><description>Data Access SessionManager Methods - get_instance() - save_credentials(self, username, password, keyspace, scbpath) - test_credentials(self, username, password, keyspace, scbpath) - connect(self) - check_connection(self) - close(self) CycloJourneyCatalogDAO Methods - maybe_create_schema(self) - write_journey( self, cyclo_name, journey_id, start, end, active, summary) - get_all_journeys(self) - get_all_journeys_for_cyclo(self, cyclo_name) - get_single_journey_for_cyclo(self, cyclo_name, journey_id) CycloSpinDAO Methods - maybe_create_schema(self) - write_readings(self, cyclo_name, stage_name, journey_id, data) - get_spin_readings_for_cyclo_journey( self, cyclo_name, journey_id, page_size=25, page_state=None)</description></item></channel></rss>